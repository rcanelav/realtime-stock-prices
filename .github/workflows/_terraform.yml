name: 'Terraform Plan/Apply'

on:
    workflow_call:
        inputs:
          environment:
            description: environment to deploy to
            required: true
            type: string
          working_directory:
              description: working directory for terraform
              required: true
              type: string
              default: terraform/environments/${{ inputs.environment }}
          deploy:
              description: deploy to environment
              required: true
              type: boolean
              default: false

#Special permissions required for OIDC authentication
permissions:
    id-token: write
    contents: read
    pull-requests: write

env:
    TF_VAR_AWS_BEDROCK_MODEL_ID: ${{ secrets.AWS_BEDROCK_MODEL_ID }}
    TF_VAR_AWS_REGION: ${{ vars.AWS_REGION }}

jobs:
    terraform-plan:
        name: ðŸš€Terraform Plan - ${{ inputs.environment }}
        runs-on: ubuntu-latest
        environment: ${{ inputs.environment }}
        defaults:
            run:
                working-directory: ${{ inputs.working_directory }}
        env:
            # this is needed since we are running terraform with read-only permissions
            ARM_SKIP_PROVIDER_REGISTRATION: true

        outputs:
            tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

        steps:
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                  role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
                  aws-region: ${{ vars.AWS_REGION }}

            - name: Checkout
              uses: actions/checkout@v4

            # Install latest version of Terraform CLI
            - uses: hashicorp/setup-terraform@v3
              with:
                terraform_wrapper: false

            # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
            - name: Terraform Init
              run: |
                  terraform init

            # Checks that all Terraform configuration files adhere to a canonical format
            # Will fail the build if not
            - name: Terraform Format
              run: terraform fmt -check

            # Generates an execution plan for Terraform
            # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
            - name: Terraform Plan
              id: tf-plan
              run: |
                  export exitcode=0
                  terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

                  echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

                  if [ $exitcode -eq 1 ]; then
                    echo Terraform Plan Failed!
                    exit 1
                  else
                    exit 0
                  fi

            # Save plan to artifacts
            - name: Publish Terraform Plan
              uses: actions/upload-artifact@v4
              with:
                  name: tfplan
                  path: tfplan

            # Create string output of Terraform Plan
            - name: Create String Output
              id: tf-plan-string
              run: |
                  TERRAFORM_PLAN=$(terraform show -no-color tfplan)

                  delimiter="$(openssl rand -hex 8)"
                  echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
                  echo "## ðŸ§© Terraform Plan Output - ${{ inputs.environment }}" >> $GITHUB_OUTPUT
                  echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
                  echo "" >> $GITHUB_OUTPUT
                  echo '```terraform' >> $GITHUB_OUTPUT
                  echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
                  echo '```' >> $GITHUB_OUTPUT
                  echo "</details>" >> $GITHUB_OUTPUT
                  echo "${delimiter}" >> $GITHUB_OUTPUT

            # Publish Terraform Plan as task summary
            - name: Publish Terraform Plan to Task Summary
              env:
                  SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
              run: |
                  echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

    terraform-apply:
        name: ðŸš€Terraform Apply - ${{ inputs.environment }}
        if: ${{ inputs.deploy  && needs.terraform-plan.outputs.tfplanExitCode == '2'}}
        needs: [terraform-plan]
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ${{ inputs.working_directory }}

        steps:
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                  role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
                  aws-region: ${{ vars.AWS_REGION }}

            - name: Checkout
              uses: actions/checkout@v4

            # Install latest version of Terraform CLI
            - uses: hashicorp/setup-terraform@v3
              with:
                terraform_wrapper: false

            # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
            - name: Terraform Init
              run: |
                  terraform init

            # Terraform Apply
            - name: Terraform Apply
              run: terraform apply -auto-approve
