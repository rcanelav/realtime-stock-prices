on:
    workflow_call:
        inputs:
            environment:
                description: environment to deploy to
                required: true
                type: string
            image_tag:
                description: image tag to deploy
                required: true
                type: string

#Special permissions required for OIDC authentication
permissions:
    id-token: write
    contents: read

env:
    AWS_REGION: ${{ vars.AWS_REGION}}

jobs:
    update-lambda-image:
        runs-on: ubuntu-latest
        steps:
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
                aws-region: ${{ vars.AWS_REGION }}

            - name: Fetch all /stock-agent/ params from SSM
              id: fetch_ssm_params
              run: |
                echo "Fetching all /stock-agent/ parameters..."
                PARAMS=$(aws ssm get-parameters-by-path \
                  --path "/stock-agent/" \
                  --with-decryption \
                  --recursive \
                  --query "Parameters[*]" \
                  --output json)

                echo "$PARAMS" > params.json

                # Build a JSON object of env vars: {KEY1: VALUE1, ...}
                ENV_VARS=$(jq '
                reduce .[] as $param ({};
                  . + {
                    ($param.Name | sub("^/stock-agent/"; "")) : $param.Value
                  }
                )
                ' params.json)

                echo "Collected environment variables:"
                echo "$ENV_VARS" > new_env.json

            - name: Merge with existing Lambda environment
              run: |
                echo "Merging with current Lambda environment..."

                CURRENT_ENV_RAW=$(aws lambda get-function-configuration \
                  --function-name ${{ vars.FUNCTION_ARN }} \
                  --query "Environment.Variables" \
                  --output json)

                CURRENT_ENV=$(echo "$CURRENT_ENV_RAW" | jq 'if type == "object" then . else {} end')

                ENV_VARS=$(jq '
                  reduce .[] as $param ({};
                    . + {
                      ($param.Name | sub("^/stock-agent/"; "")) : $param.Value
                    }
                  )
                ' params.json)

                echo "$ENV_VARS" > new_env.json

                UPDATED_ENV=$(jq -s '.[0] * .[1]' <(echo "$CURRENT_ENV") new_env.json)

                echo "Merged env."
                rm params.json new_env.json

                aws lambda update-function-configuration \
                  --function-name ${{ vars.FUNCTION_ARN }} \
                  --environment "{\"Variables\":$UPDATED_ENV}"

            - name: Wait for update to finish
              run: |
                for i in {1..10}; do
                  STATUS=$(aws lambda get-function-configuration \
                    --function-name ${{ vars.FUNCTION_ARN }} \
                    --query "LastUpdateStatus" \
                    --output text)
                  echo "Status: $STATUS"
                  [ "$STATUS" == "Successful" ] && break
                  sleep 5
                done

            - name: Update Lambda image
              env:
                IMAGE_TAG: ${{ inputs.image_tag }}
              run: |
                    echo "Updating Lambda image..."
                    aws lambda update-function-code \
                    --function-name ${{ vars.FUNCTION_ARN }} \
                    --image-uri ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
