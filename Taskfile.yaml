version: "3"

env:
  LOCAL_URL: "http://localhost:8080/api/stock-agent/invoke"
  REMOTE_URL: "https://vvpjwjbctmecg6gddg4o5e4jl40rldqq.lambda-url.eu-west-2.on.aws/api/stock-agent/invoke"
  TFVARS_FILE: "./infrastructure/terraform/variables.auto.tfvars"
  ECR_REPOSITORY: "641811205781.dkr.ecr.eu-west-2.amazonaws.com"
  ECR_IMAGE: "stock-prices-agent-ecr"
  FUNCTION_ARN: "arn:aws:lambda:eu-west-2:641811205781:function:stock-prices-agent"
  IMAGE_TAG: "latest3"

tasks:
  # ##################### General purpose tasks ################################
  ce:
    desc: Create environment variables file
    cmds:
    - echo "Creating environment variables file..."
    - |
      if [ -f .env ]; then
        echo ".env file already exists"
      else
        cp template.env .env
        echo ".env file created successfully"
      fi

  tests:
    desc: Run tests
    cmds:
    - echo "Running tests..."
    - python -m pytest .

  r:
    desc: Run the application
    cmds:
    - echo "Running the application..."
    - uvicorn src.main:app --port 8080 --reload | jq --unbuffered -R 'fromjson?'

  il1:
    desc: Invoke the local server
    cmds:
    - echo "Invoking local server at ${LOCAL_URL}"
    - >
      curl -X POST ${LOCAL_URL} \
        -H "Content-Type: application/json" \
        -H "Transfer-Encoding: chunked" \
        -H "X-API-KEY: sk-1a2b3c4d5e6f7g8h9i0j" \
        -d '{"query": "What is the stock price for Amazon right now?"}'

  il2:
    desc: Invoke the local server
    cmds:
    - echo "Invoking local server at ${LOCAL_URL}"
    - >
      curl -X POST ${LOCAL_URL} \
        -H "Content-Type: application/json" \
        -H "Transfer-Encoding: chunked" \
        -H "X-API-KEY: sk-1a2b3c4d5e6f7g8h9i0j" \
        -d '{"query": "What were the stock prices for Amazon in Q4 last year?"}'
  ir1:
    desc: Invoke the remote server
    cmds:
    - echo "Invoking remote server at ${REMOTE_URL}"
    - |
      curl -X POST "${REMOTE_URL}" \
        -H "Content-Type: application/json" \
        -H "Lambda-Runtime-Function-Response-Mode: streaming" \
        -H "Transfer-Encoding: chunked" \
        -H "X-API-KEY: sk-1a2b3c4d5e6f7g8h9i0j" \
        -d '{"query": "What is the stock price for Amazon right now?"}'

  ir2:
    desc: Invoke the local server with a query
    cmds:
    - echo "Invoking local server with query"
    - |
      curl -N -X POST "${REMOTE_URL}" \
        -H "Content-Type: application/json" \
        -H "X-API-KEY: sk-1a2b3c4d5e6f7g8h9i0j" \
        -d '{"query": "What were the stock prices for Amazon in Q4 last year?"}'

  # ################## Infrastructure configuration tasks ######################
  create-oidc:
    desc: Create OIDC role for GitHub Actions
    cmds:
    - echo "Creating OIDC role for GitHub Actions..."
    - sh install.sh oidc

  update-oidc:
    desc: Update OIDC role for GitHub Actions
    cmds:
    - echo "Updating OIDC role for GitHub Actions..."
    - sh install.sh oidc-update

  backend-create:
    desc: Create Terraform backend
    cmds:
    - echo "Creating Terraform backend..."
    - sh install.sh create

  backend-update:
    desc: Update Terraform backend
    cmds:
    - echo "Updating Terraform backend..."
    - sh install.sh update

  backend-destroy:
    desc: Destroy Terraform backend
    cmds:
    - echo "Destroying Terraform backend..."
    - sh install.sh destroy

  # ########################## Terraform tasks ##################################
  tfvars:
    desc: Create Terraform variables file if it doesn't exist
    cmds:
    - |
      if [ -f ${TFVARS_FILE} ]; then
        echo "File ${TFVARS_FILE} already exists"
      else
        echo "AWS_BEDROCK_MODEL_ID = \"\"" > ${TFVARS_FILE}
        echo "AWS_REGION           = \"\"" >> ${TFVARS_FILE}
        echo "${TFVARS_FILE} created successfully"
      fi

  tff:
    desc: Format Terraform files
    cmds:
    - echo "Formatting Terraform files..."
    - cd infrastructure/terraform && terraform fmt -recursive && terraform fmt -check

  tfi:
    desc: Initialize Terraform
    cmds:
    - echo "Initializing Terraform..."
    - cd infrastructure/terraform && terraform init

  tfp:
    desc: Run Terraform plan
    cmds:
    - echo "Running Terraform plan..."
    - cd infrastructure/terraform && terraform plan

  tfa:
    desc: Apply Terraform changes
    cmds:
    - echo "Applying Terraform changes..."
    - cd infrastructure/terraform && terraform apply

  tfa-:
    desc: Apply Terraform changes with auto-approve
    cmds:
    - echo "Applying Terraform changes with auto-approve..."
    - cd infrastructure/terraform && terraform apply -auto-approve

  tfdocs:
    desc: Generate Terraform documentation
    cmds:
    - echo "Generating Terraform documentation..."
    - |
      cd infrastructure/terraform/ && \
      terraform-docs -c ./.terraform-docs.yml markdown table . --output-file README.md

  # ########################## Docker tasks ##################################

  db:
    desc: Build Docker image
    cmds:
    - echo "Building Docker image..."
    - docker build -t ${ECR_REPOSITORY}/${ECR_IMAGE}:${IMAGE_TAG} . --provenance=false

  dr:
    desc: Run Docker container
    cmds:
    - echo "Running Docker container..."
    - docker run --rm -p 8080:8080 ${ECR_REPOSITORY}/${ECR_IMAGE}:${IMAGE_TAG}

  dp:
    desc: Push Docker image to ECR
    cmds:
    - echo "Pushing Docker image to ECR..."
    - aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
    - docker push  ${ECR_REPOSITORY}/${ECR_IMAGE}:${IMAGE_TAG}

  # ######################## Lambda tasks ##################################
  lu:
    desc: Update Lambda function
    cmds:
    - echo "Updating Lambda function..."
    - aws lambda update-function-code --function-name ${FUNCTION_ARN} --image-uri ${ECR_REPOSITORY}/${ECR_IMAGE}:${IMAGE_TAG}
